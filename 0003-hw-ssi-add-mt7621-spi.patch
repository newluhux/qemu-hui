From 24306f006a812d85ace1bf4e62d697f73beed04c Mon Sep 17 00:00:00 2001
From: Lu Hui <luhux76@gmail.com>
Date: Sun, 27 Aug 2023 15:42:05 +0800
Subject: [PATCH 3/7] hw: ssi: add mt7621-spi

---
 hw/ssi/Kconfig              |   4 +
 hw/ssi/meson.build          |   1 +
 hw/ssi/mt7621-spi.c         | 334 ++++++++++++++++++++++++++++++++++++
 include/hw/ssi/mt7621-spi.h |  72 ++++++++
 4 files changed, 411 insertions(+)
 create mode 100644 hw/ssi/mt7621-spi.c
 create mode 100644 include/hw/ssi/mt7621-spi.h

diff --git a/hw/ssi/Kconfig b/hw/ssi/Kconfig
index 7d90a02..59fa52d 100644
--- a/hw/ssi/Kconfig
+++ b/hw/ssi/Kconfig
@@ -20,3 +20,7 @@ config XILINX_SPIPS
 config STM32F2XX_SPI
     bool
     select SSI
+
+config MT7621_SPI
+    bool
+    select SSI
diff --git a/hw/ssi/meson.build b/hw/ssi/meson.build
index 0aebcdd..4c26a1a 100644
--- a/hw/ssi/meson.build
+++ b/hw/ssi/meson.build
@@ -11,3 +11,4 @@ system_ss.add(when: 'CONFIG_XLNX_VERSAL', if_true: files('xlnx-versal-ospi.c'))
 system_ss.add(when: 'CONFIG_IMX', if_true: files('imx_spi.c'))
 system_ss.add(when: 'CONFIG_OMAP', if_true: files('omap_spi.c'))
 system_ss.add(when: 'CONFIG_IBEX', if_true: files('ibex_spi_host.c'))
+system_ss.add(when: 'CONFIG_MT7621_SPI', if_true: files('mt7621-spi.c'))
diff --git a/hw/ssi/mt7621-spi.c b/hw/ssi/mt7621-spi.c
new file mode 100644
index 0000000..4be1ebd
--- /dev/null
+++ b/hw/ssi/mt7621-spi.c
@@ -0,0 +1,334 @@
+/*
+ * Mediatek 7621 spi master emulation
+ *
+ * Copyright (c) 2023 Lu Hui <luhux76@gmail.com>
+ * some code from linux kernel:
+ * drivers/spi/spi-mt7621.c
+ * Copyright (C) 2011 Sergiy <piratfm@gmail.com>
+ * Copyright (C) 2011-2013 Gabor Juhos <juhosg@openwrt.org>
+ * Copyright (C) 2014-2015 Felix Fietkau <nbd@nbd.name>
+ * some code from ./npcm7xx_fiu.c
+ * Copyright 2020 Google LLC
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2 or later, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "qemu/osdep.h"
+#include "hw/irq.h"
+#include "hw/qdev-properties.h"
+#include "hw/sysbus.h"
+#include "hw/ssi/ssi.h"
+#include "qemu/log.h"
+#include "qemu/module.h"
+#include "hw/ssi/mt7621-spi.h"
+
+//#define DEBUG_MT7621_SPI 1
+
+#ifdef DEBUG_MT7621_SPI
+#define DPRINTF(fmt, ...) \
+    do { printf("mt7621-spi: " fmt , ## __VA_ARGS__); } while (0)
+#else
+#define DPRINTF(fmt, ...) do {} while (0)
+#endif
+
+#define REG_INDEX(offset)   (offset / sizeof(uint32_t))
+
+inline static void mt7621_spi_cs_update(mt7621SpiState *s)
+{
+    if (s->regs[REG_INDEX(REG_SPI_CS_POLAR)] & 0x1) {
+        DPRINTF("cs low\n");
+        qemu_irq_lower(s->cs_line);
+    } else {
+        DPRINTF("cs high\n");
+        qemu_irq_raise(s->cs_line);
+    }
+}
+
+static void mt7621_spi_update_flash_cmd(struct mt7621SpiFlash *flash)
+{
+    /* flash read command */
+    uint8_t read_cmd_sel;
+    uint8_t read_cmd_table[] = { 0x03, 0x0b, 0x3b, 0xbb, 0x6b, 0xeb, 0xe3 };
+
+    read_cmd_sel = extract32(flash->spi->regs[REG_INDEX(REG_SPI_QUEUE_CTL)],
+            0, 3);
+    flash->read_cmd = read_cmd_table[read_cmd_sel];
+}
+
+static void mt7621_spi_reset(DeviceState *ds)
+{
+    mt7621SpiState *s = (mt7621SpiState *)ds;
+    DPRINTF("spi master reset\n");
+
+    /* reset control registers */
+    s->regs[REG_INDEX(REG_SPI_TRANS)] = REG_SPI_TRANS_RST;
+    s->regs[REG_INDEX(REG_SPI_MASTER)] = REG_SPI_MASTER_RST;
+    s->regs[REG_INDEX(REG_SPI_MORE_BUF)] = REG_SPI_MORE_BUF_RST;
+    s->regs[REG_INDEX(REG_SPI_QUEUE_CTL)] = REG_SPI_QUEUE_CTL_RST;
+    s->regs[REG_INDEX(REG_SPI_STATUS)] = REG_SPI_STATUS_RST;
+    s->regs[REG_INDEX(REG_SPI_CS_POLAR)] = REG_SPI_CS_POLAR_RST;
+    s->regs[REG_INDEX(REG_SPI_SPACE)] = REG_SPI_SPACE_RST;
+
+    /* reset data registers */
+    /* OP_ADDR */
+    s->regs[REG_INDEX(REG_SPI_OP_ADDR)] = 0x0;
+    /* D0 ~ D7 */
+    int i;
+    for (i = 0; i < 8; i++) {
+        s->regs[REG_INDEX(REG_SPI_DIDO_0) + i] = 0x0;
+    }
+
+    /* reset cs line */
+    mt7621_spi_cs_update(s);
+
+    /* reset flash read cmd */
+    mt7621_spi_update_flash_cmd(&s->flash);
+}
+
+inline static int mt7621_spi_can_xfer(mt7621SpiState *s)
+{
+    /* mt7621 spi only support half-duplex */
+    /* full-duplex is buggy, seem like hardware error */
+    /* you can't found full-duplex driver on internet */
+    if (test_bit(10, (void *)&s->regs[REG_INDEX(REG_SPI_MASTER)]) == 1) {
+        qemu_log_mask(LOG_GUEST_ERROR, "%s: don't use full-duplex mode\n",
+                      __func__);
+        return 0;
+    }
+
+    /* check busy indication */
+    if (test_bit(16, (void *)&s->regs[REG_INDEX(REG_SPI_TRANS)])) {
+        DPRINTF("controller is busy\n");
+        return 0;
+    }
+    return 1;
+}
+
+inline static void mt7621_spi_set_busy(mt7621SpiState *s)
+{
+    set_bit(16, (void *)&s->regs[REG_INDEX(REG_SPI_TRANS)]);
+}
+
+inline static void mt7621_spi_clear_busy(mt7621SpiState *s)
+{
+    /* clean busy indication */
+    clear_bit(16, (void *)&s->regs[REG_INDEX(REG_SPI_TRANS)]);
+}
+
+
+static void mt7621_spi_xfer(mt7621SpiState *s)
+{
+    if (!mt7621_spi_can_xfer(s)) {
+        return;
+    }
+
+    /* check transaction start flag */
+    if (test_bit(8, (void *)&s->regs[REG_INDEX(REG_SPI_TRANS)]) == 0) {
+        return;
+    }
+
+    mt7621_spi_set_busy(s);
+
+    /* send data */
+    uint16_t cmd_bits;
+    cmd_bits = extract32(s->regs[REG_INDEX(REG_SPI_MORE_BUF)], 24, 6);
+    if ((cmd_bits / 8) == 4) {
+        s->regs[REG_INDEX(REG_SPI_OP_ADDR)] =
+                bswap32(s->regs[REG_INDEX(REG_SPI_OP_ADDR)]);
+    }
+    DPRINTF("cmd_bits: 0x%02x\n", cmd_bits);
+    DPRINTF("opcode:   0x%08x\n", s->regs[REG_INDEX(REG_SPI_OP_ADDR)]);
+    uint16_t i;
+    for (i = 0; i < (cmd_bits / 8); i++) {
+        ssi_transfer(s->spi, s->regs[REG_INDEX(REG_SPI_OP_ADDR)] >> (8 * i));
+    }
+
+    uint16_t tx_bits;
+    tx_bits = extract32(s->regs[REG_INDEX(REG_SPI_MORE_BUF)], 0, 9);
+    DPRINTF("tx_bits: 0x%02x\n", tx_bits);
+    uint8_t *buf;
+    buf = (uint8_t *)&s->regs[REG_INDEX(REG_SPI_DIDO_0)];
+    for (i = 0; i < (tx_bits / 8); i++) {
+        DPRINTF("tx: 0x%02x\n", buf[i]);
+        ssi_transfer(s->spi, buf[i]);
+    }
+
+    /* recv data */
+    uint16_t rx_bits;
+    DPRINTF("rx_bits: 0x%02x\n", tx_bits);
+    rx_bits = extract32(s->regs[REG_INDEX(REG_SPI_MORE_BUF)], 12, 9);
+    for (i = 0; i < (rx_bits / 8); i++) {
+        buf[i] = ssi_transfer(s->spi, 0xFF);
+        DPRINTF("rx: 0x%02x\n", buf[i]);
+    }
+
+    mt7621_spi_clear_busy(s);
+
+    /* clean transaction start flag */
+    clear_bit(8, (void *)&s->regs[REG_INDEX(REG_SPI_TRANS)]);
+}
+
+static uint64_t mt7621_spi_read(void *opaque, hwaddr addr, unsigned int size)
+{
+    mt7621SpiState *s = (mt7621SpiState *)opaque;
+    if (addr >= MT7621_SPI_MEM_SIZE) {
+        qemu_log_mask(LOG_GUEST_ERROR, "%s: out-of-bounds offset 0x%04x\n",
+                      __func__, (uint32_t)addr);
+        return 0x0;
+    }
+
+    return s->regs[REG_INDEX(addr)];
+}
+
+static void mt7621_spi_write(void *opaque, hwaddr addr,
+                             uint64_t value, unsigned int size)
+{
+    mt7621SpiState *s = (mt7621SpiState *)opaque;
+    if (addr >= MT7621_SPI_MEM_SIZE) {
+        qemu_log_mask(LOG_GUEST_ERROR, "%s: out-of-bounds offset 0x%04x\n",
+                      __func__, (uint32_t)addr);
+        return;
+    }
+
+    switch (addr) {
+    case REG_SPI_TRANS:
+        s->regs[REG_INDEX(addr)] = value;
+        mt7621_spi_xfer(s);
+        break;
+    case REG_SPI_CS_POLAR:
+        s->regs[REG_INDEX(addr)] = value;
+        mt7621_spi_cs_update(s);
+        break;
+    case REG_SPI_QUEUE_CTL:
+        s->regs[REG_INDEX(addr)] = value;
+        mt7621_spi_update_flash_cmd(&s->flash);
+        break;
+    default:
+        s->regs[REG_INDEX(addr)] = value;
+    }
+}
+
+static uint64_t mt7621_spi_flash_read(void *opaque, hwaddr addr,
+                                      unsigned int size)
+{
+
+    struct mt7621SpiFlash *flash = opaque;
+    mt7621SpiState *s = flash->spi;
+    if (mt7621_spi_can_xfer(s)) {
+        mt7621_spi_set_busy(s);
+    } else {
+        return 0x0;
+    }
+
+    /* set cs */
+    s->regs[REG_INDEX(REG_SPI_CS_POLAR)] |= (1 << 0);
+    mt7621_spi_cs_update(s);
+
+    /* send flash read command to flash */
+    ssi_transfer(s->spi, flash->read_cmd);
+    /* 3b addr */
+    ssi_transfer(s->spi, extract32(addr, 16, 8));
+    ssi_transfer(s->spi, extract32(addr, 8, 8));
+    ssi_transfer(s->spi, extract32(addr, 0, 8));
+
+    uint64_t val = 0;
+    /* recv data from flash */
+    int i;
+    for (i = 0; i < size; i++) {
+        val = deposit64(val, 8 * i, 8, ssi_transfer(s->spi, 0));
+    }
+
+    /* set cs */
+    s->regs[REG_INDEX(REG_SPI_CS_POLAR)] &= ~(1 << 0);
+    mt7621_spi_cs_update(s);
+
+    mt7621_spi_clear_busy(s);
+
+    DPRINTF("flash read addr %08lx size %02x value %08lx\n",
+            addr, size, val);
+    return val;
+}
+
+static void mt7621_spi_flash_write(void *opaque, hwaddr addr, uint64_t v,
+                                   unsigned int size)
+{
+    (void) opaque;
+    (void) addr;
+    (void) v;
+    (void) size;
+    return;
+}
+
+static const MemoryRegionOps mt7621_spi_ops = {
+    .read = mt7621_spi_read,
+    .write = mt7621_spi_write,
+    .endianness = DEVICE_LITTLE_ENDIAN,
+    .valid = {
+        .min_access_size = 4,
+        .max_access_size = 4
+    }
+};
+
+static const MemoryRegionOps mt7621_spi_flash_ops = {
+    .read = mt7621_spi_flash_read,
+    .write = mt7621_spi_flash_write,
+    .endianness = DEVICE_LITTLE_ENDIAN,
+    .valid = {
+        .min_access_size = 1,
+        .max_access_size = 4,
+        .unaligned = true, /* must impl unaligned access */
+    },
+};
+
+static void mt7621_spi_realize(DeviceState *dev, Error **errp)
+{
+    SysBusDevice *sbd = SYS_BUS_DEVICE(dev);
+    mt7621SpiState *s = MT7621_SPI(dev);
+
+    s->spi = ssi_create_bus(dev, "spi");
+
+    memory_region_init_io(&s->mmio, OBJECT(s), &mt7621_spi_ops, s,
+                          TYPE_MT7621_SPI, 0xFF);
+    sysbus_init_mmio(sbd, &s->mmio);
+
+    mt7621SpiFlash *flash = &s->flash;
+    flash->spi = s;
+    memory_region_init_io(&flash->direct_access,
+                          OBJECT(s), &mt7621_spi_flash_ops, flash,
+                          "flash-direct", MT7621_SPI_SPACE_SIZE);
+    sysbus_init_mmio(sbd, &flash->direct_access);
+
+    sysbus_init_irq(sbd, &s->cs_line);
+}
+
+static void mt7621_spi_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(klass);
+
+    dc->reset = mt7621_spi_reset;
+    dc->realize = mt7621_spi_realize;
+}
+
+static const TypeInfo mt7621_spi_info = {
+    .name           = TYPE_MT7621_SPI,
+    .parent         = TYPE_SYS_BUS_DEVICE,
+    .instance_size  = sizeof(mt7621SpiState),
+    .class_init     = mt7621_spi_class_init,
+};
+
+static void mt7621_spi_register_types(void)
+{
+    type_register_static(&mt7621_spi_info);
+}
+
+type_init(mt7621_spi_register_types)
diff --git a/include/hw/ssi/mt7621-spi.h b/include/hw/ssi/mt7621-spi.h
new file mode 100644
index 0000000..e647cdb
--- /dev/null
+++ b/include/hw/ssi/mt7621-spi.h
@@ -0,0 +1,72 @@
+/*
+ * Mediatek 7621 spi master emulation
+ *
+ * Copyright (c) 2023 Lu Hui <luhux76@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 or
+ * (at your option) any later version.
+ */
+
+#ifndef HW_MT7621_SPI_H
+#define HW_MT7621_SPI_H
+
+#include "hw/sysbus.h"
+#include "qemu/units.h"
+#include "qom/object.h"
+
+#define TYPE_MT7621_SPI "mt7621-spi"
+OBJECT_DECLARE_SIMPLE_TYPE(mt7621SpiState, MT7621_SPI)
+
+enum {
+    MT7621_SPI_MEM_SIZE   = 0x100,
+    MT7621_SPI_REG_NUMS   = (MT7621_SPI_MEM_SIZE / sizeof(uint32_t)),
+    MT7621_SPI_SPACE_SIZE = 4 * MiB,
+};
+
+enum {
+    REG_SPI_TRANS     = 0x00,
+    REG_SPI_OP_ADDR   = 0x04,
+    REG_SPI_DIDO_0    = 0x08,
+    REG_SPI_DIDO_7    = 0x24,
+    REG_SPI_MASTER    = 0x28,
+    REG_SPI_MORE_BUF  = 0x2C,
+    REG_SPI_QUEUE_CTL = 0x30,
+    REG_SPI_STATUS    = 0x34,
+    REG_SPI_CS_POLAR  = 0x38,
+    REG_SPI_SPACE     = 0x3C,
+};
+
+enum {
+    REG_SPI_TRANS_RST     = 0x00160001,
+    REG_SPI_MASTER_RST    = 0x000d0880,
+    REG_SPI_MORE_BUF_RST  = 0x00000000,
+    REG_SPI_QUEUE_CTL_RST = 0x00000e40,
+    REG_SPI_STATUS_RST    = 0x00000030,
+    REG_SPI_CS_POLAR_RST  = 0x00000000,
+    REG_SPI_SPACE_RST     = 0x00000030,
+};
+
+typedef struct mt7621SpiState mt7621SpiState;
+typedef struct mt7621SpiFlash mt7621SpiFlash;
+
+typedef struct mt7621SpiFlash {
+    mt7621SpiState *spi;
+    MemoryRegion direct_access;
+    uint8_t read_cmd;
+} mt7621SpiFlash;
+
+struct mt7621SpiState {
+    SysBusDevice parent_obj;
+    MemoryRegion mmio;
+    SSIBus *spi;
+
+    qemu_irq cs_line;
+
+    uint32_t regs[MT7621_SPI_REG_NUMS];
+
+    /* flash direct access space */
+    mt7621SpiFlash flash;
+};
+
+#endif
-- 
2.41.0

